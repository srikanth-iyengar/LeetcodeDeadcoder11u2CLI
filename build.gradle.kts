/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    java
    `maven-publish`
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-inject:3.5.2")
    implementation("io.micronaut:micronaut-validation:3.5.2")
    implementation("info.picocli:picocli:4.6.3")
    implementation("io.micronaut:micronaut-jackson-databind:3.5.2")
    implementation("io.micronaut.picocli:micronaut-picocli:4.2.1")
    implementation("jakarta.annotation:jakarta.annotation-api:2.0.0")
    implementation("org.json:json:20220320")
    runtimeOnly("ch.qos.logback:logback-classic:1.2.11")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.2")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.2")
    testImplementation("io.micronaut.test:micronaut-test-junit5:3.3.1")
}

group = "com.github.Deadcoder11u2"
version = "0.1"
description = "cliapplication"
java.sourceCompatibility = JavaVersion.VERSION_1_8

tasks {
    val fatJar = register<Jar>("fatJar") {
        dependsOn.addAll(listOf("compileJava", "compileKotlin", "processResources")) // We need this for Gradle optimization to work
        archiveClassifier.set("standalone") // Naming the jar
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest { attributes(mapOf("Main-Class" to application.mainClass)) } // Provided we set it up in the application plugin configuration
        val sourcesMain = sourceSets.main.get()
        val contents = configurations.runtimeClasspath.get()
            .map { if (it.isDirectory) it else zipTree(it) } +
                sourcesMain.output
        from(contents)
    }
    build {
        dependsOn(fatJar) // Trigger fat jar creation during build
    }
}

tasks.withType<Jar> {
    manifest {
        attributes["Main-Class"] = "com.github.Deadcoder11u2.CliapplicationCommand"
    }
}

tasks {
    "build" {
        dependsOn(fatJar)
    }
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}
